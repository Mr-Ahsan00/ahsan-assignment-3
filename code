#include <iostream>
using namespace std;

// Abstract base class
class Shape {
public:
    // Pure virtual function for calculating area
    virtual double calculateArea() const = 0;

    // Virtual destructor (important for polymorphism)
    virtual ~Shape() {}
};

// Concrete derived class: Circle
class Circle : public Shape {
private:
    double radius;

public:
    // Constructor
    Circle(double r) : radius(r) {}

    // Implementation of the pure virtual function
    double calculateArea() const override {
        return 3.14159 * radius * radius; // Area of a circle: Ï€ * r^2
    }
};

// Concrete derived class: Rectangle
class Rectangle : public Shape {
private:
    double length;
    double width;

public:
    // Constructor
    Rectangle(double l, double w) : length(l), width(w) {}

    // Implementation of the pure virtual function
    double calculateArea() const override {
        return length * width; // Area of a rectangle: length * width
    }
};

int main() {
    // Creating objects of the derived classes
    Circle circle(5.0);
    Rectangle rectangle(4.0, 6.0);

    // Using polymorphism to calculate and display areas
    Shape* shape1 = &circle;
    Shape* shape2 = &rectangle;

    cout << "Area of the circle: " << shape1->calculateArea() << endl;
    cout << "Area of the rectangle: " << shape2->calculateArea() << endl;

    return 0;
}
